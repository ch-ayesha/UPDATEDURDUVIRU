{"version":3,"sources":["components/Layout/Layout.ts","components/Wizard/style.ts","components/Wizard/Wizard.tsx","containers/SubmitSteps/SubmitSteps.tsx","containers/SubmitSteps/index.ts"],"names":["Layout","styled","div","props","theme","breakpoints","tablet","WizardContainer","StepContainer","WizardNavControlPortal","AsyncLoad","loadable","_ref","container","fallback","_jsx","children","cacheKey","_ref2","Wizard","_ref3","steps","match","useRouteMatch","location","useLocation","loadSteps","setLoadSteps","React","useState","pathList","useMemo","base","url","replace","map","step","path","useEffect","StateMachineProvider","_jsxs","SlideRoutes","timing","duration","Route","exact","Array","isArray","s","render","componentPath","id","memo","StoreKey","createStore","recordYourCough","recordingFile","undefined","uploadedFile","name","middleWares","storageType","window","localStorage","baseUrl","baseComponentPath","middleComponentPathRecording","recordYourCoughLogic","storeKey","previousStep","nextStep","otherSteps","manualUploadStep","metadata","currentLogic","SubmitSteps","state","useStateMachine","history","useHistory","problemRoute","inputState","out","toTest","push","file","route","itemWithProblem","find","toTestItem","checkFileProblem","size","checkFileConsistencyProblem","WrapperSubmitSteps"],"mappings":"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","file":"static/js/15.1cd8c4de.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Layout = styled.div`\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    margin: auto;\n\n    max-width: 768px;\n    width: 100%;\n  }\n`;\n\nexport default Layout;\n","import styled from 'styled-components';\n\nexport const WizardContainer = styled.div`\n  display: flex;\n  flex-direction:column;\n\n  height:100%;\n`;\n\nexport const StepContainer = styled.div`\n  height: 100%;\n`;\n\nexport const WizardNavControlPortal = styled.div`\n  margin-bottom: 16px;\n`;\n","import React from 'react';\nimport loadable from '@loadable/component';\nimport SlideRoutes from 'react-slide-routes';\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom';\nimport { StateMachineProvider } from 'little-state-machine';\n\n// Components\nimport Layout from 'components/Layout/';\n\n// Style\nimport {\n  WizardContainer,\n  StepContainer,\n  WizardNavControlPortal,\n} from './style';\n\ninterface WizardProps {\n  steps: Wizard.Step[];\n}\n\ninterface AsyncLoadProps extends Partial<Wizard.StepProps> {\n  container: string;\n}\n\nconst AsyncLoad = loadable(({ container }: AsyncLoadProps) => import(`containers/${container}`), {\n  fallback: <div>Loading ...</div>,\n  cacheKey: ({ container }: AsyncLoadProps) => container,\n});\n\nfunction clearPath(path: string) {\n  return path.replace(/\\/$/, '');\n}\n\nconst Wizard = ({ steps, children }: React.PropsWithChildren<WizardProps>) => {\n  const match = useRouteMatch();\n  const location = useLocation();\n  const [loadSteps, setLoadSteps] = React.useState(false);\n\n  const pathList = React.useMemo(() => {\n    const base = clearPath(match.url);\n    return steps.map(step => base + step.path);\n  }, [match.url, steps]);\n\n  React.useEffect(() => {\n    setLoadSteps(true);\n  }, []);\n\n  return (\n    <StateMachineProvider>\n      <WizardContainer>\n        <StepContainer>\n          {\n            loadSteps && (\n              <SlideRoutes\n                location={location}\n                timing=\"ease-in-out\"\n                duration={500}\n                pathList={pathList}\n              >\n                {\n                  steps.map(step => (\n                    <Route\n                      key={step.componentPath}\n                      exact\n                      path={Array.isArray(step.path)\n                        ? step.path.map(s => (match.path + s))\n                        : match.path + step.path}\n                      render={() => (\n                        <Layout>\n                          <AsyncLoad\n                            container={step.componentPath}\n                            {...step.props}\n                          />\n                        </Layout>\n\n                      )}\n                    />\n                  ))\n                }\n              </SlideRoutes>\n            )\n          }\n        </StepContainer>\n        <WizardNavControlPortal\n          id=\"wizard-buttons\"\n        >\n          {children}\n        </WizardNavControlPortal>\n      </WizardContainer>\n    </StateMachineProvider>\n  );\n};\n\nexport default React.memo(Wizard);\n","import React from 'react';\nimport { createStore, useStateMachine } from 'little-state-machine';\nimport { useHistory } from 'react-router-dom';\nimport Wizard from 'components/Wizard';\n\n// Wizard\nconst StoreKey = 'submit-steps';\n\ncreateStore({\n  [StoreKey]: {\n    recordYourCough: {\n      recordingFile: undefined,\n      uploadedFile: undefined,\n    },\n  },\n}, {\n  name: 'VirufyWizard',\n  middleWares: [],\n  storageType: window.localStorage,\n});\n\nconst baseUrl = '/submit-steps';\nconst baseComponentPath = 'SubmitSteps';\nconst middleComponentPathRecording = 'RecordingsSteps';\nconst middleComponentPathSubmission = 'Submission';\nconst recordYourCoughLogic = 'recordYourCough';\n\nconst steps: Wizard.Step[] = [\n  // Record Your Cough Steps\n  {\n    path: '/step-record/cough',\n    componentPath: `${baseComponentPath}/${middleComponentPathRecording}/Introduction`,\n    props: {\n      storeKey: StoreKey,\n      previousStep: '/welcome/step-3',\n      nextStep: `${baseUrl}/step-listen/cough`,\n      otherSteps: {\n        manualUploadStep: `${baseUrl}/step-manual-upload/cough`,\n      },\n      metadata: {\n        currentLogic: recordYourCoughLogic,\n      },\n    },\n  },\n  {\n    path: '/step-manual-upload/cough',\n    componentPath: `${baseComponentPath}/${middleComponentPathRecording}/RecordManualUpload`,\n    props: {\n      storeKey: StoreKey,\n      previousStep: `${baseUrl}/step-record/cough`,\n      nextStep: `${baseUrl}/step-listen/cough`,\n      metadata: {\n        currentLogic: recordYourCoughLogic,\n      },\n    },\n  },\n  {\n    path: '/step-listen/cough',\n    componentPath: `${baseComponentPath}/${middleComponentPathRecording}/ListenAudio`,\n    props: {\n      storeKey: StoreKey,\n      previousStep: `${baseUrl}/step-record/cough`,\n      nextStep: `${baseUrl}/prediction-result`,\n      metadata: {\n        currentLogic: recordYourCoughLogic,\n      },\n    },\n  },\n  // Submission\n  {\n    path: '/prediction-result',\n    componentPath: `${baseComponentPath}/${middleComponentPathSubmission}/PredictionResult`,\n    props: {\n      storeKey: StoreKey,\n      previousStep: `${baseUrl}/step-record/cough`,\n      nextStep: '',\n    },\n  },\n];\n\nconst SubmitSteps = () => {\n  // Hooks\n  const { state } = useStateMachine();\n  const history = useHistory();\n\n  // Effects\n  React.useEffect(() => {\n    const checkFileProblem = (file: File) => {\n      if (file && file.size === undefined) {\n        return true;\n      }\n      return false;\n    };\n\n    const checkFileConsistencyProblem = (inputState: Record<string, any>) => {\n      let out = null;\n\n      if (inputState[StoreKey]) {\n        const { recordYourCough } = inputState[StoreKey];\n        const toTest = [];\n\n        if (recordYourCough) {\n          const { recordingFile, uploadedFile } = recordYourCough;\n          if (recordingFile) {\n            toTest.push({ file: recordingFile, route: '/step-record/cough' });\n          }\n          if (uploadedFile) {\n            toTest.push({ file: uploadedFile, route: '/step-manual-upload/cough' });\n          }\n        }\n\n        const itemWithProblem = toTest.find(toTestItem => checkFileProblem(toTestItem.file));\n        if (itemWithProblem) {\n          out = itemWithProblem.route;\n        }\n      }\n\n      return out;\n    };\n\n    const problemRoute = checkFileConsistencyProblem(state);\n    if (problemRoute) {\n      history.push(`/${StoreKey}${problemRoute}`);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return null;\n};\n\nconst WrapperSubmitSteps = () => (\n  <Wizard\n    steps={steps}\n  >\n    <SubmitSteps />\n  </Wizard>\n);\n\nexport default React.memo(WrapperSubmitSteps);\n","export { default } from './SubmitSteps';\n"],"sourceRoot":""}