{"version":3,"sources":["components/Layout/Layout.ts","components/Wizard/style.ts","components/Wizard/Wizard.tsx","components/DotIndicators/style.ts","components/DotIndicators/DotIndicators.tsx","containers/Welcome/Welcome.tsx"],"names":["Layout","styled","div","props","theme","breakpoints","tablet","WizardContainer","StepContainer","WizardNavControlPortal","AsyncLoad","loadable","_ref","container","fallback","_jsx","children","cacheKey","_ref2","Wizard","_ref3","steps","match","useRouteMatch","location","useLocation","loadSteps","setLoadSteps","React","useState","pathList","useMemo","base","url","replace","map","step","path","useEffect","StateMachineProvider","_jsxs","SlideRoutes","timing","duration","Route","exact","Array","isArray","s","render","componentPath","id","memo","WelcomeWizardStepIndicators","ul","WelcomeWizardStepIndicator","li","colors","gray","darkBlack","ProgressIndicator","className","current","total","stepButtons","stepButtonsElements","push","StoreKey","createStore","name","middleWares","storageType","window","localStorage","baseUrl","stepsWithoutDots","storeKey","previousStep","nextStep","Welcome","pathname","active","findIndex","DotIndicators","length"],"mappings":"8MAWeA,MATAC,UAAOC,GAAG;uBACFC,GAASA,EAAMC,MAAMC,YAAYC;;;;;;ECDjD,MAAMC,EAAkBN,UAAOC,GAAG;;;;;EAO5BM,EAAgBP,UAAOC,GAAG;;EAI1BO,EAAyBR,UAAOC,GAAG;;cCWhD,MAAMQ,EAAYC,aAASC,IAAA,IAAC,UAAEC,GAA2BD,EAAA,OAAK,OAAO,KAAcC,IAAY,GAAE,CAC/FC,SAAUC,cAAA,OAAAC,SAAK,gBACfC,SAAUC,IAAA,IAAC,UAAEL,GAA2BK,EAAA,OAAKL,CAAS,IAOxD,MAAMM,EAASC,IAAgE,IAA/D,MAAEC,EAAK,SAAEL,GAAgDI,EACvE,MAAME,EAAQC,cACRC,EAAWC,eACVC,EAAWC,GAAgBC,IAAMC,UAAS,GAE3CC,EAAWF,IAAMG,SAAQ,KAC7B,MAAMC,EAAiBV,EAAMW,IATnBC,QAAQ,MAAO,IAUzB,OAAOb,EAAMc,KAAIC,GAAQJ,EAAOI,EAAKC,MAAK,GACzC,CAACf,EAAMW,IAAKZ,IAMf,OAJAO,IAAMU,WAAU,KACdX,GAAa,EAAK,GACjB,IAGDZ,cAACwB,IAAoB,CAAAvB,SACnBwB,eAACjC,EAAe,CAAAS,SAAA,CACdD,cAACP,EAAa,CAAAQ,SAEVU,GACEX,cAAC0B,IAAW,CACVjB,SAAUA,EACVkB,OAAO,cACPC,SAAU,IACVb,SAAUA,EAASd,SAGjBK,EAAMc,KAAIC,GACRrB,cAAC6B,IAAK,CAEJC,OAAK,EACLR,KAAMS,MAAMC,QAAQX,EAAKC,MACrBD,EAAKC,KAAKF,KAAIa,GAAM1B,EAAMe,KAAOW,IACjC1B,EAAMe,KAAOD,EAAKC,KACtBY,OAAQA,IACNlC,cAACf,EAAM,CAAAgB,SACLD,cAACL,EAAS,CACRG,UAAWuB,EAAKc,iBACZd,EAAKjC,WATViC,EAAKc,qBAqBxBnC,cAACN,EAAsB,CACrB0C,GAAG,iBAAgBnC,SAElBA,QAGgB,EAIZY,UAAMwB,KAAKjC,E,iGC3FnB,MAAMkC,EAA8BpD,UAAOqD,EAAE;;;;;;sBAM9BnD,GAASA,EAAMC,MAAMC,YAAYC;;;EAK1CiD,EAA6BtD,UAAOuD,EAAE;sBAC7BrD,GAASA,EAAMC,MAAMqD,OAAOC;;;;;;;;;;;;wBAY1BvD,GAASA,EAAMC,MAAMqD,OAAOE;;;cCXpD,MAAMC,EAAoBhD,IAIK,IAJJ,UACzBiD,EAAY,GAAE,QACdC,EAAO,MACPC,GACuBnD,EAEvB,MAAMoD,EAAcpC,IAAMG,SAAQ,KAChC,MAAMkC,EAA4C,GAElD,IAAK,IAAI7B,EAAO,EAAGA,EAAO2B,EAAO3B,GAAQ,EACvC6B,EAAoBC,KAClBnD,cAACwC,EAA0B,CACzBM,UAAWzB,IAAS0B,EAAU,SAAW,GACzCX,GAAI,qBAAqBf,KACpB,qBAAqBA,MAKhC,OAAO6B,CAAmB,GACzB,CAACH,EAASC,IAEb,OACEhD,cAACsC,EAA2B,CAACQ,UAAWA,EAAU7C,SAC/CgD,GAC2B,EAInBpC,UAAMwB,KAAKQ,GCpC1B,MAAMO,EAAW,UAEjBC,YAAY,CACV,CAACD,GAAW,CAAC,GACZ,CACDE,KAAM,eACNC,YAAa,GACbC,YAAaC,OAAOC,eAGtB,MAAMC,EAAU,WAEVC,EAAkC,CACtC,CACEtC,KAAM,IACNa,cAAe,gBACf/C,MAAO,CACLyE,SAAUT,EACVU,aAAc,GAAGH,IACjBI,SAAU,GAAGJ,cAKbrD,EAAuB,CAC3B,CACEgB,KAAM,UACNa,cAAe,gBACf/C,MAAO,CACLyE,SAAUT,EACVU,aAAc,GAAGH,WACjBI,SAAU,qCAKVC,EAAUA,KAEd,MAAMvD,EAAWC,cACXH,EAAQC,cAERU,EAAMT,EAASwD,SAAS9C,QAAQZ,EAAMW,IAAK,IAC3CgD,EAAS5D,EAAM6D,WAAU9C,GAAQA,EAAKC,OAASJ,IAErD,OACElB,cAACI,IAAM,CACLE,MAAO,IAAIsD,KAAqBtD,GAAOL,SAEtCiE,GAAU,GACTlE,cAACoE,EAAa,CACZrB,QAASmB,EACTlB,MAAO1C,EAAM+D,UAGV,EAIExD,cAAMwB,KAAK2B,E","file":"static/js/32.6d9d3143.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Layout = styled.div`\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    margin: auto;\n\n    max-width: 768px;\n    width: 100%;\n  }\n`;\n\nexport default Layout;\n","import styled from 'styled-components';\n\nexport const WizardContainer = styled.div`\n  display: flex;\n  flex-direction:column;\n\n  height:100%;\n`;\n\nexport const StepContainer = styled.div`\n  height: 100%;\n`;\n\nexport const WizardNavControlPortal = styled.div`\n  margin-bottom: 16px;\n`;\n","import React from 'react';\nimport loadable from '@loadable/component';\nimport SlideRoutes from 'react-slide-routes';\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom';\nimport { StateMachineProvider } from 'little-state-machine';\n\n// Components\nimport Layout from 'components/Layout/';\n\n// Style\nimport {\n  WizardContainer,\n  StepContainer,\n  WizardNavControlPortal,\n} from './style';\n\ninterface WizardProps {\n  steps: Wizard.Step[];\n}\n\ninterface AsyncLoadProps extends Partial<Wizard.StepProps> {\n  container: string;\n}\n\nconst AsyncLoad = loadable(({ container }: AsyncLoadProps) => import(`containers/${container}`), {\n  fallback: <div>Loading ...</div>,\n  cacheKey: ({ container }: AsyncLoadProps) => container,\n});\n\nfunction clearPath(path: string) {\n  return path.replace(/\\/$/, '');\n}\n\nconst Wizard = ({ steps, children }: React.PropsWithChildren<WizardProps>) => {\n  const match = useRouteMatch();\n  const location = useLocation();\n  const [loadSteps, setLoadSteps] = React.useState(false);\n\n  const pathList = React.useMemo(() => {\n    const base = clearPath(match.url);\n    return steps.map(step => base + step.path);\n  }, [match.url, steps]);\n\n  React.useEffect(() => {\n    setLoadSteps(true);\n  }, []);\n\n  return (\n    <StateMachineProvider>\n      <WizardContainer>\n        <StepContainer>\n          {\n            loadSteps && (\n              <SlideRoutes\n                location={location}\n                timing=\"ease-in-out\"\n                duration={500}\n                pathList={pathList}\n              >\n                {\n                  steps.map(step => (\n                    <Route\n                      key={step.componentPath}\n                      exact\n                      path={Array.isArray(step.path)\n                        ? step.path.map(s => (match.path + s))\n                        : match.path + step.path}\n                      render={() => (\n                        <Layout>\n                          <AsyncLoad\n                            container={step.componentPath}\n                            {...step.props}\n                          />\n                        </Layout>\n\n                      )}\n                    />\n                  ))\n                }\n              </SlideRoutes>\n            )\n          }\n        </StepContainer>\n        <WizardNavControlPortal\n          id=\"wizard-buttons\"\n        >\n          {children}\n        </WizardNavControlPortal>\n      </WizardContainer>\n    </StateMachineProvider>\n  );\n};\n\nexport default React.memo(Wizard);\n","import styled from 'styled-components';\n\nexport const WelcomeWizardStepIndicators = styled.ul`\n  display: flex;\n  justify-content:center;\n  padding: 0;\n  margin-bottom: 22px;\n\n @media screen and (${props => props.theme.breakpoints.tablet}){\n    margin-bottom: 40px;\n  }\n`;\n\nexport const WelcomeWizardStepIndicator = styled.li`\n  background-color: ${props => props.theme.colors.gray};\n  border-radius: 50%;\n  display: inline-block;\n\n  height: 7px;\n  width: 7px;\n\n  &:not(:first-of-type){\n    margin-left: 6px;\n  };\n\n  &.active {\n    background-color: ${props => props.theme.colors.darkBlack};\n  };\n\n`;\n","/* eslint-disable react/require-default-props */\nimport React from 'react';\n\n// Styles\nimport {\n  WelcomeWizardStepIndicators,\n  WelcomeWizardStepIndicator,\n} from './style';\n\ninterface ProgressIndicatorProps {\n  className?: string;\n  current: number;\n  total: number;\n}\n\nconst ProgressIndicator = ({\n  className = '',\n  current,\n  total,\n}: ProgressIndicatorProps) => {\n  // Memos\n  const stepButtons = React.useMemo(() => {\n    const stepButtonsElements: React.ReactElement[] = [];\n\n    for (let step = 0; step < total; step += 1) {\n      stepButtonsElements.push((\n        <WelcomeWizardStepIndicator\n          className={step === current ? 'active' : ''}\n          id={`WelcomeStepButton-${step}`}\n          key={`WelcomeStepButton-${step}`}\n        />\n      ));\n    }\n\n    return stepButtonsElements;\n  }, [current, total]);\n\n  return (\n    <WelcomeWizardStepIndicators className={className}>\n      {stepButtons}\n    </WelcomeWizardStepIndicators>\n  );\n};\n\nexport default React.memo(ProgressIndicator);\n","import React from 'react';\nimport { createStore } from 'little-state-machine';\nimport { useLocation, useRouteMatch } from 'react-router-dom';\n\n// Wizard\nimport Wizard from 'components/Wizard';\nimport DotIndicators from 'components/DotIndicators';\n\nconst StoreKey = 'welcome';\n\ncreateStore({\n  [StoreKey]: {},\n}, {\n  name: 'VirufyWizard',\n  middleWares: [],\n  storageType: window.localStorage,\n});\n\nconst baseUrl = '/welcome';\n\nconst stepsWithoutDots: Wizard.Step[] = [\n  {\n    path: '/',\n    componentPath: 'Welcome/Step2',\n    props: {\n      storeKey: StoreKey,\n      previousStep: `${baseUrl}`,\n      nextStep: `${baseUrl}/step-3`,\n    },\n  },\n];\n\nconst steps: Wizard.Step[] = [\n  {\n    path: '/step-3',\n    componentPath: 'Welcome/Step3',\n    props: {\n      storeKey: StoreKey,\n      previousStep: `${baseUrl}/step-2`,\n      nextStep: '/submit-steps/step-record/cough',\n    },\n  },\n];\n\nconst Welcome = () => {\n  // Hooks\n  const location = useLocation();\n  const match = useRouteMatch();\n\n  const url = location.pathname.replace(match.url, '');\n  const active = steps.findIndex(step => step.path === url);\n\n  return (\n    <Wizard\n      steps={[...stepsWithoutDots, ...steps]}\n    >\n      {active >= 0 && (\n        <DotIndicators\n          current={active}\n          total={steps.length}\n        />\n      )}\n    </Wizard>\n  );\n};\n\nexport default React.memo(Welcome);\n"],"sourceRoot":""}